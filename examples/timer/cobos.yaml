asyncapi: 2.0.0
info:
  title: Coboservices API
  version: '0.0.2'
  description: |
    Coboservices API description

servers:
  production:
    url: localhost:{port}
    protocol: mqtt
    description: Test broker
    variables:
      port:
        description: TODO
        default: '1883'
        enum:
          - '1883'

defaultContentType: application/json

channels:
  API/ERROR:
    description: |
      The API has received an invalid message.
    subscribe:
      message:
        name: ERROR
        payload:
          $ref: '#/components/schemas/api_error_payload'

  VGS/CMD_CALL:
    description: |
      Virtual Groups Service - Call
    publish:
      message:
        name: CMD_CALL
        payload:
          $ref: '#/components/schemas/vgs_cmd_call_payload'

  MON/knx:
    description: |
      monitoring metric
    subscribe:
      message:
        name: knx
        payload:
          $ref: '#/components/schemas/mon_knx_payload'

  DTS/INFO_DATETIME:
    description: |
      Current date and time.
    subscribe:
      message:
        name: INFO_DATETIME
        payload:
          $ref: '#/components/schemas/dts_info_datetime_payload'

  DTS/CMD_GET_DATETIME:
    description: |
      Get current date and time.
    publish:
      message:
        name: CMD_GET_DATETIME
        payload:
          $ref: '#/components/schemas/dts_cmd_get_datetime_payload'

  EML/CMD_SEND_MAILS:
    description: |
      Send the mails given in the payload.
    publish:
      message:
        name: CMD_SEND_MAILS
        payload:
          $ref: '#/components/schemas/eml_cmd_send_mails_payload'
  EML/CMD_SEND_TEST_MAIL:
    description: |
      Send a test mail.
      This should be used after the user entered a new mail address.
    publish:
      message:
        name: CMD_SEND_TEST_MAIL
        payload:
          $ref: '#/components/schemas/eml_cmd_send_test_mail_payload'

  PRE/CMD_ACTIVATE:
    description: |
      Activate presence simulation.
      `PRE/INFO_CONFIG` is published.
    publish:
      message:
        name: CMD_ACTIVATE
        payload:
          $ref: '#/components/schemas/empty_payload'
  PRE/CMD_DEACTIVATE:
    description: |
      Deactivate presence simulation.
      `PRE/INFO_CONFIG` is published.
    publish:
      message:
        name: CMD_DEACTIVATE
        payload:
          $ref: '#/components/schemas/empty_payload'
  PRE/CMD_GET_CONFIG:
    description: |
      Request the configuration of the presence simulation service.
      `PRE/INFO_CONFIG` is published.
    publish:
      message:
        name: CMD_GET_CONFIG
        payload:
          $ref: '#/components/schemas/empty_payload'
  PRE/CMD_SET_CONFIG:
    description: |
      Set the configuration of the presence simulation service.
      `PRE/INFO_CONFIG` is published.
    publish:
      message:
        name: CMD_SET_CONFIG
        payload:
          $ref: '#/components/schemas/pre_cmd_set_config_payload'
  PRE/INFO_CONFIG:
    description: |
      The configuration of the presence simulation service.
      Published on any state-transition and after `ALM/{alm_type}/CMD_GET_STATE` received.
    subscribe:
      message:
        name: INFO_CONFIG
        payload:
          $ref: '#/components/schemas/pre_info_config_payload'

  TIM/CMD_ADD:
    description: |
      Add a new timer.
      The service creates a new timer with ID `timer_id`.
      Publishes `TIM/INFO_STATE/{timer_id}`.
    publish:
      message:
        name: CMD_ADD
        payload:
          $ref: '#/components/schemas/tim_info_payload'
  TIM/CMD_UPDATE/{timer_id}:
    description: |
      Update timer.
      The service updates the timer with ID `timer_id`.
      Publishes `TIM/INFO_STATE/{timer_id}`.
    parameters:
      timer_id:
        $ref: '#/components/parameters/timer_id'
    publish:
      message:
        name: CMD_UPDATE
        payload:
          $ref: '#/components/schemas/tim_info_payload'
  TIM/CMD_CHANGE_ACTIVITY/{timer_id}:
    description: |
      DEPRECATED. Use `CMD_ACTIVATE` and `CMD_DEACTIVATE`.
      Activates or Deactivates the timer with ID `timer_id` according to the given `active` property.
      Publishes `TIM/INFO_STATE/{timer_id}`.
    parameters:
      timer_id:
        $ref: '#/components/parameters/timer_id'
    publish:
      message:
        name: CMD_CHANGE_ACTIVITY
        payload:
          $ref: '#/components/schemas/tim_cmd_change_activity_payload'
  TIM/CMD_ACTIVATE/{timer_id}:
    description: |
      Activates the timer with ID `timer_id`.
      Publishes `TIM/INFO_STATE/{timer_id}`.
    parameters:
      timer_id:
        $ref: '#/components/parameters/timer_id'
    publish:
      message:
        name: CMD_ACTIVATE
        payload:
          $ref: '#/components/schemas/empty_payload'
  TIM/CMD_DEACTIVATE/{timer_id}:
    description: |
      Deactivates the timer with ID `timer_id`.
      Publishes `TIM/INFO_STATE/{timer_id}`.
    parameters:
      timer_id:
        $ref: '#/components/parameters/timer_id'
    publish:
      message:
        name: CMD_DEACTIVATE
        payload:
          $ref: '#/components/schemas/empty_payload'
  TIM/CMD_DELETE/{timer_id}:
    description: |
      Delete timer with ID `timer_id`.
      Publishes `TIME/INFO_DELETED/{timer_id}`.
    parameters:
      timer_id:
        $ref: '#/components/parameters/timer_id'
    publish:
      message:
        name: CMD_DELETE
        payload:
          $ref: '#/components/schemas/empty_payload'
  TIM/CMD_GET_ALL_STATES:
    description: |
      Publishes `TIM/INFO_STATE/{timer_id}` for all timers.
    publish:
      message:
        name: CMD_GET_ALL_STATES
        payload:
          $ref: '#/components/schemas/empty_payload'
  TIM/CMD_GET_STATE/{timer_id}:
    description: |
      Publishes `TIM/INFO_STATE/{timer_id}`.
    parameters:
      timer_id:
        $ref: '#/components/parameters/timer_id'
    publish:
      message:
        name: CMD_GET_STATE
        payload:
          $ref: '#/components/schemas/empty_payload'
  TIM/CMD_REMOVE_TIMERS_OF_OWNER:
    description: |
      Removes all timers with the given owner.
      Used by services that use timers, as of now this is `PRE`.
    publish:
      message:
        name: CMD_REMOVE_TIMERS_OF_OWNER
        payload:
          $ref: '#/components/schemas/tim_cmd_remove_timers_of_owner_payload'
  TIM/INFO_STATE/{timer_id}:
    description: |
      State of the timer with ID `timer_id`.
    parameters:
      timer_id:
        $ref: '#/components/parameters/timer_id'
    subscribe:
      message:
        name: INFO_STATE
        payload:
          $ref: '#/components/schemas/tim_info_payload'
  TIM/INFO_DELETED/{timer_id}:
    description: |
      The timer with ID `timer_id` was deleted.
    subscribe:
      message:
        name: INFO_DELETED
        payload:
          $ref: '#/components/schemas/empty_payload'

components:
  parameters:
    scene_id:
      description: ID of a scene.
      schema:
        type: string
    alm_type:
      description: type of an alarm
      schema:
        type: string
    timer_id:
      description: ID of a timer.
      schema:
        type: string
    group_address:
      description: A group address in format `X-Y-Z`.
      schema:
        type: string

  schemas:
    empty_payload:
      type: object
      additionalProperties: false
      properties:
        _sender:
          description: sender uuid
          type: string

    vgs_cmd_call_payload:
      type: object
      additionalProperties: true
      properties:
        virtual_group_id:
          description: virtual_group uuid
          type: string
        connection_code:
          description: connection_code
          type: string
        value:
          description: value
          type: ["string", "integer"]

    api_error_payload:
      type: object
      additionalProperties: false
      properties:
        _sender:
          description: sender uuid
          type: string
        _client_info:
          description: _client_info
          type: string
        tag:
          description: |
            the tag of the invalid message
            (empty string if `tag` was not set).
          type: string
        owner:
          description: |
            the owner of the invalid message
            (empty string if `owner` was not set).
          type: string
        traceback:
          description: |
            List of lines in the schema validation traceback.
          type: array
          items:
            type: string

    mon_knx_payload:
      type: object
      additionalProperties: true
      properties:
        _sender:
          description: sender uuid
          type: string


    dts_info_datetime_payload:
      type: object
      additionalProperties: false
      properties:
        _sender:
          description: sender uuid
          type: string
        utcnow_iso:
          description: UTC date and time
          type: string
        local_now_iso:
          description: Local date and time. This is also sent to KNX.
          type: string



    dts_cmd_get_datetime_payload:
      type: object

    alm_info_alm_payload:
      type: object
      additionalProperties: false
      properties:
        _sender:
          description: sender uuid
          type: string
        perpetrator_names:
          description: list of perpetrators
          type: array
          items:
            type: string
      examples:
        - perpetrator_names: ["OG1 - Schlafen - Fenster Garten"]
    alm_cmd_set_config_payload:
      type: object
      additionalProperties: false
      properties:
        _sender:
          description: sender uuid
          type: string
        mails:
          description: list of valid mail addresses
          type: array
          items:
            type: string
        delay_seconds:
          description: time from activate command until arming
          type: integer
          minimum: 4
          maximum: 361
        monitored:
          description: list of monitored group addresses
          type: array
          items:
            type: string
        actions:
          description: list of action that should be executed on alarm
          type: array
          items:
            type: string
      required: [ delay_seconds, mails, monitored ]
      examples:
        - mails: [ "fey@ambihome.com" ]
          delay_seconds: 10
          monitored: [ "0-0-1" ]
          actions: ["sendEmails"]
    alm_info_state_payload:
      type: object
      additionalProperties: false
      properties:
        _sender:
          description: sender uuid
          type: string
        state:
          description: internal state of the service.
          type: string
          enum:
            - state_disarmed
            - state_wait
            - state_armed
            - state_wait_alarm
            - state_alarm
        perpetrator_names:
          description: list of perpetrators
          type: array
          items:
            type: string
        ready:
          description: a list of errors or `ALM_READY`
          type: array
          items:
            type: string
            enum:
              - ALM_NOT_READY_MAILS_EMPTY
              - ALM_NOT_READY_NO_DELAY_GIVEN
              - ALM_NOT_READY_MONITORED_EMPTY
              - ALM_NOT_READY_MONITORED_ACTIVE
              - ALM_NOT_READY_UNINITIALISED
              - ALM_READY
        delay_seconds:
          description: wait `delay_seconds` after `CMD_ARM` before actually arming the service.
          type: integer
        mails:
          description: List of emails to send alarm-messages to.
          type: array
        actions:
          type: array
        monitored:
          description: List of Windows and/or Motion detectors to monitor
          type: array
      required: [ state, ready, delay_seconds, mails, monitored ]

    eml_cmd_send_mails_payload:
      type: object
      additionalProperties: false
      properties:
        _sender:
          description: sender uuid
          type: string
        mails:
          description: list of mails to be sent
          type: array
          items:
            type: object
            properties:
              to:
                description: receipient mail address
                type: string
              subject:
                description: subject of the mail
                type: string
              text:
                description: text of the mail
                type: string
      required: [ mails ]
    eml_cmd_send_test_mail_payload:
      type: object
      additionalProperties: false
      properties:
        _sender:
          description: sender uuid
          type: string
        test_mail:
          description: mail adress to send the test mail to.
          type: string
        subject:
          type: string
        body:
          type: string
      required: [ test_mail ]

    pre_cmd_set_config_payload:
      type: object
      additionalProperties: false
      properties:
        _sender:
          description: sender uuid
          type: string
        presence_channels:
          description: List of channels that should be part of the simulation.
          type: array
          items:
            type: string
      required: [ presence_channels ]
      examples:
        - presence_channels:
            - channel_3
            - channel_14
    pre_info_config_payload:
      type: object
      additionalProperties: false
      properties:
        _sender:
          description: sender uuid
          type: string
        presence_channels:
          description: List of channels that should be part of the simulation.
          type: array
          items:
            type: string
        active:
          description: State of the simulation.
          type: boolean
      required: [ active, presence_channels ]
      examples:
        - presence_channels:
            - channel_3
            - channel_14
          active: true

    scn_cmd_call_alm_scene_payload:
      type: object
      additionalProperties: true
      properties:
        alarmMode:
          type: string

    scn_config_payload:
      type: object
      additionalProperties: true
      properties:
        _sender:
          description: sender uuid
          type: string
        id:
          description: Scene ID (only if scene already exists)
          type: ["string", "null"]
        frontend_id:
          description: frontend_id
          type: string
        name:
          description: Scene name
          type: string
        alarmMode:
          description: alarmMode
          type: ["string", "null"]
        fixed:
          description: Scene is fixed
          type: ["boolean", "null"]
        static:
          description: Scene is static
          type: ["boolean", "null"]
        member_channels:
          description: channel ids of the scene members
          type: array
          items:
            type: string

      required: [ name ]
      examples:
        - name: Sample Scene Name
          member_channels:
            - channel_3
            - channel_14

    sts_info_all_values_payload:
      type: object
      properties:
        _sender:
          description: sender uuid
          type: string
        <group-address>:
          description: |
            A group-address in format `^[0-9]+-[0-9]+-[0-9]+$` with its value.
            ```
            Hinweis: patternProperties werden vom doc-generator ignoriert, daher so.
            TODO: Aendern in Liste: [{"address": ..., "value":...},...]
            ```
          type: string

    tim_info_payload:
      type: object
      properties:
        _sender:
          description: sender uuid
          type: string
        name:
          description: Name of the timer. DEPRECATED.
          type: ["string", "null"]
        days:
          description: Weekdays on which the timer should be executed if active.
          type: array
          items:
            type: number
            description: Monday=0 .. Sunday=6.
            minimum: 0
            maximum: 6
        time:
          description: |
            Point in time when the timer should be executed if active.
            This is either
            - an absolute time in the format `HH:MM:SS`
            - `sunrise` or `sunset` with an optional offset in the same format.
            ```
            <sun><operator><time>
            sun := "sunset" | "sunrise"
            operator "= "+" | "-"
            time := HH:MM:SS

            examples:
            sunset-00:05:00 -- five minutes before sunset
            sunrise+01:00:00 -- one hour after sunrise
            sunrise -- at sunrise (no offset)
            ```
          type: string
        service:
          description: TODO
          type: string
          enum:
            - ambid
            - SCN
            - VGS
        channel:
          description: |
            ID of the channel that should be affected by the timer.
          type: string
        connectionCode:
          type: ["string", "null"]
          description: cc from visu HACK
        connection_code:
          description: |
            connection_code that should be used when firing the timer.
            Only if service==ambid, omit or null otherwise.
            For service==SCN the timer always triggers `CMD_CALL`.
          type: ["string", "null"]
        actor:
          description: |
            DEPRECATED. use channel instead.
            Group address of the actor-channel that the timer belongs to.
            Format: `X-Y-Z`.
          type: string
        value:
          description: |
            Only if service==ambid, omit or null otherwise.
            When the timer fires, this value is sent to group-address of channel/connection_code.
            For service==SCN `CMD_CALL` takes no arguments.
          anyOf:
            - type: string
            - type: number
              description: DEPRECATED
        random:
          description: |
            NOT IMPLEMENTED
          type: number
        owner:
          description: |
            The optional owner of the timer.
          type: string
        frontend_id:
          description: |
            TODO: Martin, benutzt du das hier?
          type: string
        active:
          description: |
            Active state of the timer. TODO should be boolean.
          type: number
      required: [ days, time, active ]
      additionalProperties: true
      examples:
        - days: [ 0, 1, 2, 3, 4, 5, 6 ]
          time: sunset
          channel: channel_2
          connection_code: CC_Output_Switch
          value: 0
          active: 1
        - days: [ 0, 1, 2, 3, 4, 5, 6 ]
          time: "12:55:00"
          channel: channel_2
          connection_code: CC_Output_Switch
          value: 0
          active: 1
        - days: [ 0, 1, 2, 3, 4, 5, 6 ]
          time: "12:55:00"
          service: SCN
          channel: static_scene_1
          active: 1
    tim_cmd_change_activity_payload:
      type: object
      properties:
        _sender:
          description: sender uuid
          type: string
        active:
          description: |
            Active state of the timer.
            TODO nicht besser 2 commands mit leerem payload (activate und deactivate)?
            TODO should be boolean.
          type: number
      required: [ active ]
      additionalProperties: false
    tim_cmd_remove_timers_of_owner_payload:
      type: object
      properties:
        _sender:
          description: sender uuid
          type: string
        owner:
          description: |
            Timer owner whose timers should be deleted.
          type: string

