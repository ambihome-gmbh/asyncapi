{application,asyncapi,
    [{modules,
         ['Elixir.Asyncapi','Elixir.Asyncapi.Broker',
          'Elixir.Asyncapi.Broker.Dummy','Elixir.Asyncapi.Broker.MQTT',
          'Elixir.Asyncapi.Message','Elixir.Asyncapi.Parser',
          'Elixir.Asyncapi.Parser.Sequence','Elixir.Asyncapi.TestHelper',
          'Elixir.DummyBroker','Elixir.ModuleGenerator','Elixir.MqttAsyncapi',
          'Elixir.StackApi.Payload.Pop','Elixir.StackApi.Payload.PopResponse',
          'Elixir.StackApi.Payload.Push']},
     {compile_env,
         [{asyncapi,[broker],{ok,'Elixir.Asyncapi.Broker.Dummy'}},
          {asyncapi,
              [schemas],
              {ok,[{stack_service,
                       <<"/Users/sf/ws/asyncapi/examples/stack/priv/schema/bundled/service_schema.json">>},
                   {stack_user,
                       <<"/Users/sf/ws/asyncapi/examples/stack/priv/schema/bundled/user_schema.json">>}]}},
          {elixir,[dbg_callback],{ok,{'Elixir.Macro',dbg,[]}}}]},
     {optional_applications,[]},
     {applications,
         [kernel,stdlib,elixir,logger,jason,ex_json_schema,nimble_parsec,
          recase,emqtt]},
     {description,"asyncapi"},
     {registered,[]},
     {vsn,"0.1.0"}]}.
