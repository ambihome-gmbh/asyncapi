{application,asyncapi,
    [{modules,
         ['Elixir.AlarmApi.Payload.Arm','Elixir.AlarmApi.Payload.Disarm',
          'Elixir.AlarmApi.Payload.DpWrite',
          'Elixir.AlarmApi.Payload.GetState',
          'Elixir.AlarmApi.Payload.SetConfig','Elixir.AlarmApi.Payload.State',
          'Elixir.Asyncapi','Elixir.Asyncapi.Broker',
          'Elixir.Asyncapi.Broker.Dummy','Elixir.Asyncapi.Broker.MQTT',
          'Elixir.Asyncapi.Helpers','Elixir.Asyncapi.Message',
          'Elixir.Asyncapi.Parser','Elixir.Asyncapi.Parser.Sequence',
          'Elixir.Asyncapi.TestHelper','Elixir.DatapointsApi.Payload.DpWrite',
          'Elixir.DummyBroker','Elixir.ModuleGenerator',
          'Elixir.MqttAsyncapi']},
     {compile_env,
         [{asyncapi,[broker],{ok,'Elixir.Asyncapi.Broker.Dummy'}},
          {asyncapi,
              [schemas],
              {ok,[{datapoints_service,
                       <<"/Users/sf/ws/asyncapi/examples/alarm/priv/schema/bundled/datapoints_service.json">>},
                   {alarm_service,
                       <<"/Users/sf/ws/asyncapi/examples/alarm/priv/schema/bundled/alarm_service.json">>},
                   {test_user,
                       <<"/Users/sf/ws/asyncapi/examples/alarm/priv/schema/bundled/test_user.json">>}]}},
          {elixir,[dbg_callback],{ok,{'Elixir.Macro',dbg,[]}}}]},
     {optional_applications,[]},
     {applications,
         [kernel,stdlib,elixir,logger,jason,ex_json_schema,nimble_parsec,
          recase,emqtt]},
     {description,"asyncapi"},
     {registered,[]},
     {vsn,"0.1.0"}]}.
